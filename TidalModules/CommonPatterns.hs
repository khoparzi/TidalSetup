-- Useful patterns
let footwork1 = struct "t(3,8,2)"
    footwork2 = struct "t(5,8)"
    footwork3 = struct "t(<3 5>,8,2)"
    footwork4 = struct "t(3,8,<0 7>)"
    footwork = struct "[t ~ ~ t ~ ~ t ~]"
    footwork' f p = fast f $ struct "[t ~ ~ t ~ ~ t ~]" $ p
    altfoot = struct (cat ["[t ~ ~ t ~ ~ t ~]", "[~ t ~ ~ t ~ ~ t]", "[~ ~ t ~ ~ t ~ ~]"])
    dancehall = struct "[1 ~ ~ 1] ~"
    dancehall' f p = fast f $ struct "[1 ~ ~ 1] ~" $ p
    dancehall1 = struct "[1 ~ ~ 1] ~"
    dancehall2 = struct "[1 <~ 1> ~ 1] ~"
    dancehall3 = struct "[1 <~ 1 ~> <~ 1> 1] ~"
    dancehall4 = struct "[t ~ ~ t] [~ <~ ~ ~ t>]"
    erev b p = every b (rev) $ p
    grimer1 = struct "t [~ t]? ~ [t [~ t] [~ t?] t]/2"
    grimer2 = struct (cat ["t [~ t] t*2 [~ t]", "t [t [~ t] [~ t] t]"])
    swinger = struct "[t [t ~ t]]*2"
    swinger1 = struct "[[t ~ ~] [t ~ <~ t>]]*2"
    swinger2 = struct "[t [t ~ <~ t>]]*2"
    swinger3 = struct "[[t ~ <t ~>] [t ~ <~ t>]]*2"
    swinger4 = struct "[[t ~ <t ~>]]*4"
    son23 = struct "[[1 ~ ~ 1 ~ ~ 1 ~] [~ ~ 1 ~ 1 ~ ~ ~]]"
    son32 = struct "[[~ ~ 1 ~ 1 ~ ~ ~] [1 ~ ~ 1 ~ ~ 1 ~]]"
    rhumba23 = struct "[[~ ~ 1 ~ 1 ~ ~ ~] [1 ~ ~ 1 ~ ~ ~ 1]]"
    rhumba32 = struct "[[1 ~ ~ 1 ~ ~ ~ 1] [~ ~ 1 ~ 1 ~ ~ ~]]"
    asciiStruct p = struct (ascii p)
    asciiStruct' s a p = slow s $ struct (ascii a) $ p
    asstruct = asciiStruct
    asstruct' = asciiStruct'
    binaryStruct bin = struct (binary bin)
    binaryStruct' wordLength bin p = struct (binaryN wordLength bin) $ p
    binstruct = binaryStruct
    binstruct' = binaryStruct'
    spreadStruct bin = spread binaryStruct bin
    spreadrStruct bin = spreadr binaryStruct bin
    spreadStruct' speed bin = fast speed . spread binaryStruct bin
    spreadrStruct' speed bin = fast speed . spreadr binaryStruct bin
    spreadstruct = spreadStruct
    spreadstruct' = spreadStruct'
    offed = struct "[~ t]*2"
    offed' f p = fast f $ struct "[~ t]" $ p
    hatgain p = (# gain "1 0.9 0.5 0.8") $ p
    voxfilt p = ((# bpf (slowsaw * 2000)) . (# bpq 0.2)) $ p
    freqsweep = (range 200 2000 (sine))
    highsweep = (range 4000 8000 (sine))
    midsweep = (range 800 4000 (sine))
    lowsweep = (range 50 500 (sine))
    highsweep' s = slow s $ (range 4000 8000 (sine))
    midsweep' s = slow s $ (range 800 4000 (sine))
    lowsweep' s = slow s $ (range 50 500 (sine))
    chancervb p = (# room (scramble 8 "0!7 0.9")) . (# size (wchoose[(1,0.1), (0.5, 0.25), (0, 0.5)])) $ p
    mascan = ((>| n ("0 1 2 3 4 5 6 7" + "<0 8>")) . (# legato 1))
